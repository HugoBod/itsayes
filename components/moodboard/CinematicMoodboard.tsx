'use client'

import { useState, useEffect, memo } from 'react'
import { motion, AnimatePresence } from 'framer-motion'
import { 
  CinematicMoodboardProps, 
  DEFAULT_ANIMATION_CONFIG,
  AnimationConfig 
} from '@/lib/moodboard-poster-types'
import { generate4ColorPalette, getPaletteName } from '@/lib/color-palette-generator'
import { PosterLayout } from './PosterLayout'
import { Icon } from '@/components/ui/icons'
import { Logo } from '@/components/ui/logo'

export const CinematicMoodboard = memo(function CinematicMoodboard({
  moodboard,
  onboardingData,
  onComplete,
  animationConfig: customConfig = {},
  showControls = true
}: CinematicMoodboardProps) {
  const [currentPhase, setCurrentPhase] = useState<
    'background' | 'landscape' | 'portrait' | 'accent' | 'palette' | 'poster' | 'controls'
  >('background')
  const [showPoster, setShowPoster] = useState(false)
  
  const config: AnimationConfig = { ...DEFAULT_ANIMATION_CONFIG, ...customConfig }
  
  // Transform moodboard data to poster format
  const transformToPosterData = () => {
    console.log('🎨 Transforming moodboard data:', { 
      hasMoodboard: !!moodboard, 
      hasSourceImages: !!moodboard?.source_images,
      sourceImagesLength: moodboard?.source_images?.length,
      onboardingData: !!onboardingData 
    })

    if (!moodboard) {
      console.log('❌ No moodboard data')
      return null
    }

    // Handle case where moodboard exists but no source_images (single image moodboard)
    const images = moodboard.source_images || []
    const selectedPaletteName = onboardingData?.weddingStyle?.colorPalette || 
                               onboardingData?.weddingStyle?.selectedColorPalette
    
    // Use main moodboard image if no source images
    const mainImage = moodboard.image_url
    
    // Map images to poster roles based on available images
    const heroLandscape = images.find((img: any) => 
      img.type === 'venue-ceremony' || img.type === 'reception-dining'
    )?.url || images[0]?.url || mainImage
    
    const heroPortrait = images.find((img: any) => 
      img.type === 'style-decor'
    )?.url || images[1]?.url || mainImage
    
    const accentSquare = images[2]?.url || images[1]?.url || mainImage

    // Generate 4-color palette
    const palette = generate4ColorPalette(selectedPaletteName)
    
    // Extract couple names for title
    const partner1 = onboardingData?.coupleDetails?.partner1Name || ''
    const partner2 = onboardingData?.coupleDetails?.partner2Name || ''
    const title = partner1 && partner2 ? `${partner1} & ${partner2}` : 'Wedding Vision'

    const result = {
      title,
      subtitle: getPaletteName(selectedPaletteName),
      images: {
        heroLandscape,
        heroPortrait,
        accentSquare
      },
      palette,
      credits: 'Generated by AI',
      shareUrl: '#'
    }

    console.log('✅ Poster data created:', result)
    return result
  }

  const posterData = transformToPosterData()

  // Animation sequence
  useEffect(() => {
    if (!posterData) return

    console.log('🎬 Starting animation sequence')
    const timers: NodeJS.Timeout[] = []

    // Phase 1: Background fade (immediate)
    setCurrentPhase('background')

    // For testing: skip to poster immediately
    timers.push(setTimeout(() => {
      console.log('🎬 Skipping to poster for testing')
      setCurrentPhase('poster')
      setShowPoster(true)
    }, 1000)) // Show poster after 1 second

    return () => {
      timers.forEach(clearTimeout)
    }
  }, [posterData, config, showControls])

  // Loading state
  if (!posterData) {
    return (
      <div className="w-full h-screen flex items-center justify-center bg-[#F6F2ED]">
        <div className="animate-pulse" style={{
          animation: 'heartbeat 1.5s ease-in-out infinite'
        }}>
          <Logo size="lg" heartColor="bg-primary" textColor="text-primary" className="scale-[3]" />
        </div>
        <style jsx>{`
          @keyframes heartbeat {
            0% { transform: scale(3); }
            50% { transform: scale(3.6); }
            100% { transform: scale(3); }
          }
        `}</style>
      </div>
    )
  }

  // Show final poster if sequence complete
  if (showPoster) {
    return (
      <div className="relative w-full h-screen overflow-hidden">
        <PosterLayout data={posterData} />
        
        {/* Overlay controls */}
        <AnimatePresence>
          {showControls && currentPhase === 'controls' && (
            <motion.div
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              className="absolute bottom-8 right-8 space-y-3"
            >
              <motion.button
                whileHover={{ scale: 1.05 }}
                whileTap={{ scale: 0.95 }}
                onClick={() => {
                  setCurrentPhase('background')
                  setShowPoster(false)
                }}
                className="flex items-center space-x-2 px-4 py-2 bg-black/20 backdrop-blur-sm rounded-full text-white text-sm hover:bg-black/30 transition-colors"
              >
                <Icon name="refresh" className="h-4 w-4" />
                <span>Replay</span>
              </motion.button>
              
              {onComplete && (
                <motion.button
                  whileHover={{ scale: 1.05 }}
                  whileTap={{ scale: 0.95 }}
                  onClick={onComplete}
                  className="flex items-center space-x-2 px-4 py-2 bg-primary/90 backdrop-blur-sm rounded-full text-white text-sm hover:bg-primary transition-colors"
                >
                  <Icon name="arrowRight" className="h-4 w-4" />
                  <span>Continue</span>
                </motion.button>
              )}
            </motion.div>
          )}
        </AnimatePresence>
      </div>
    )
  }

  // Cinematic sequence
  return (
    <div className="relative w-full h-screen overflow-hidden">
      {/* Background */}
      <motion.div
        initial={{ opacity: 0 }}
        animate={{ opacity: 1 }}
        transition={{ duration: config.backgroundFade / 1000 }}
        className="absolute inset-0 bg-[#F6F2ED]"
      />

      {/* Image cluster container */}
      <div className="absolute inset-0 flex items-center justify-center">
        <div className="relative w-[900px] h-[600px]">
          
          {/* Landscape image */}
          <AnimatePresence>
            {(currentPhase === 'landscape' || 
              currentPhase === 'portrait' || 
              currentPhase === 'accent' || 
              currentPhase === 'palette') && (
              <motion.div
                initial={{ opacity: 0, y: 30 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ duration: config.landscapeDuration / 1000 }}
                className="absolute left-0 top-16"
              >
                <img 
                  src={posterData.images.heroLandscape} 
                  alt="Wedding landscape"
                  className="w-[520px] h-[320px] object-cover rounded-lg shadow-2xl"
                />
              </motion.div>
            )}
          </AnimatePresence>

          {/* Portrait image */}
          <AnimatePresence>
            {(currentPhase === 'portrait' || 
              currentPhase === 'accent' || 
              currentPhase === 'palette') && (
              <motion.div
                initial={{ opacity: 0, x: 30 }}
                animate={{ opacity: 1, x: 0 }}
                transition={{ 
                  duration: config.portraitDuration / 1000,
                  delay: 0.1
                }}
                className="absolute right-0 top-0"
              >
                <img 
                  src={posterData.images.heroPortrait} 
                  alt="Wedding portrait"
                  className="w-[320px] h-[480px] object-cover rounded-lg shadow-2xl"
                />
              </motion.div>
            )}
          </AnimatePresence>

          {/* Accent square */}
          <AnimatePresence>
            {(currentPhase === 'accent' || currentPhase === 'palette') && (
              <motion.div
                initial={{ opacity: 0, scale: 0.9 }}
                animate={{ opacity: 1, scale: 1 }}
                transition={{ 
                  duration: config.accentDuration / 1000,
                  type: "spring",
                  bounce: 0.2
                }}
                className="absolute left-32 bottom-0"
              >
                <img 
                  src={posterData.images.accentSquare} 
                  alt="Wedding accent"
                  className="w-[240px] h-[240px] object-cover rounded-lg shadow-2xl border-4 border-white"
                />
              </motion.div>
            )}
          </AnimatePresence>

          {/* Floating palette chips */}
          <AnimatePresence>
            {currentPhase === 'palette' && (
              <motion.div
                className="absolute -bottom-20 left-0 right-0 flex justify-center gap-4"
              >
                {posterData.palette.map((color, index) => (
                  <motion.div
                    key={index}
                    initial={{ opacity: 0, scale: 0.8, y: 20 }}
                    animate={{ opacity: 1, scale: 1, y: 0 }}
                    transition={{ 
                      delay: index * config.paletteStagger / 1000,
                      duration: 0.5,
                      type: "spring",
                      bounce: 0.3
                    }}
                    className="relative"
                  >
                    <div 
                      className="w-16 h-16 rounded-lg shadow-lg border-2 border-white"
                      style={{ backgroundColor: color.hex }}
                    />
                    <div className="absolute -bottom-8 left-0 right-0 text-center">
                      <span className="text-xs text-gray-600 font-mono">
                        {color.hex.replace('#', '').toUpperCase()}
                      </span>
                    </div>
                  </motion.div>
                ))}
              </motion.div>
            )}
          </AnimatePresence>

        </div>
      </div>

      {/* Title overlay */}
      <motion.div
        initial={{ opacity: 0 }}
        animate={{ opacity: currentPhase === 'palette' ? 1 : 0 }}
        transition={{ duration: 0.6 }}
        className="absolute top-16 left-16"
      >
        <h1 className="font-serif text-6xl text-gray-900 leading-tight">
          {posterData.title.split(' ').map((word, index) => (
            <motion.span
              key={index}
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ delay: index * 0.1, duration: 0.5 }}
              className="block"
            >
              {word}
            </motion.span>
          ))}
        </h1>
        <motion.p
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          transition={{ delay: 0.5, duration: 0.5 }}
          className="text-gray-600 text-lg mt-2"
        >
          {posterData.subtitle}
        </motion.p>
      </motion.div>

      {/* Rotated label */}
      <motion.div
        initial={{ opacity: 0 }}
        animate={{ opacity: currentPhase === 'palette' ? 0.7 : 0 }}
        transition={{ duration: 0.6, delay: 0.3 }}
        className="absolute top-16 right-16 origin-top-right rotate-90 uppercase tracking-[0.25em] text-xs text-gray-500"
      >
        Mood Board
      </motion.div>

    </div>
  )
})

export default CinematicMoodboard