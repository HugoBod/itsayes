  üìã ANALYSE COMPL√àTE DU SYST√àME D'ONBOARDING - IT'S A YES

  üèóÔ∏è ARCHITECTURE G√âN√âRALE

  Structure de Navigation

  Votre onboarding suit un flux lin√©aire en 6 √©tapes principales :

  1. /onboarding (root) ‚Üí S√©lection couple/planner
  2. /onboarding/stage ‚Üí √âtape de planification + Lieu
  3. /onboarding/couple-details ‚Üí Noms + Date + Budget
  4. /onboarding/guest-info ‚Üí Invit√©s + Sp√©cifications
  5. /onboarding/style ‚Üí Th√®mes + Couleurs + Inspiration
  6. /onboarding/budget-guests ‚Üí C√©r√©monie + Exp√©riences
  7. /onboarding/summary ‚Üí G√©n√©ration moodboard + Migration

  Syst√®me de Stockage

  - En cours : workspace.onboarding_data_couple (JSONB)
  - Apr√®s completion : Migration vers la table items avec relations

  üìù ANALYSE D√âTAILL√âE PAR √âTAPE

  √âtape 1 : Page d'Accueil (/onboarding/page.tsx)

  // Donn√©es collect√©es
  user_type: 'couples' | 'planners'

  // Hook utilis√©
  useCompleteOnboardingNavigation(1, '/', nextPath, validation, getData)

  // Navigation
  couples ‚Üí '/onboarding/stage'
  planners ‚Üí '/onboarding/planners' (flux s√©par√©, localStorage only)

  √âtape 2 : Stage (/onboarding/stage/page.tsx)

  // Donn√©es collect√©es - step_2
  {
    stage: 'engaged' | 'planning' | 'venue-booked' | 'idea-gathering',
    weddingLocation: string // Input libre pour lieu
  }

  // Validation : stage + lieu requis
  // Sauvegarde : onboardingService.saveStep(2, data)

  √âtape 3 : Couple Details (/onboarding/couple-details/page.tsx)

  // Donn√©es collect√©es - step_2 (M√äME STEP QUE STAGE!)
  {
    partner1Name: string,
    partner2Name: string,
    weddingDate?: string, // ISO format ou null
    stillDeciding?: boolean,
    budgetValue: number, // Slider value
    currency: 'USD' | 'EUR' | 'GBP' | 'CAD' | 'AUD'
  }

  // Features
  - Calendrier custom avec react-hook-form + zod
  - Slider budget avec formatage multi-devises
  - Checkbox "still deciding" d√©sactive date
  - useOnboardingStepData(2) pour charger donn√©es existantes

  √âtape 4 : Guest Info (/onboarding/guest-info/page.tsx)

  // Donn√©es collect√©es - step_3
  {
    guestCount: number, // Slider 5-300 par pas de 5
    internationalGuests: string, // Options pr√©d√©finies
    specialRequirements: {
      allergies: boolean,
      accessibility: boolean,
      otherNotes: string
    }
  }

  // Constantes utilis√©es
  INTERNATIONAL_GUEST_OPTIONS depuis lib/constants

  √âtape 5 : Style (/onboarding/style/page.tsx)

  // Donn√©es collect√©es - step_4
  {
    themes: string[], // Multi-s√©lection checkboxes
    otherTheme?: string, // Si "other" s√©lectionn√©
    selectedColorPalette?: string, // Palette pr√©d√©finie
    colorPalette: string, // Input libre ou palette name
    inspiration?: string // Textarea libre
  }

  // Palettes de couleurs hardcod√©es (8 options)
  COLOR_PALETTE = [
    'Blush & Gold', 'Classic White', 'Sage & Cream',
    'Navy & Rose', 'Burgundy & Gold', 'Dusty Blue',
    'Terracotta & Cream', 'Lavender & Silver'
  ]

  √âtape 6 : Budget-Guests (/onboarding/budget-guests/page.tsx)

  // Donn√©es collect√©es - step_5
  {
    ceremonyType: 'religious' | 'civil' | 'symbolic' | 'mixed',
    religiousType?: string, // Dropdown si religious
    otherReligious?: string, // Si "Other" s√©lectionn√©
    experiences: string[], // Multi-s√©lection checkboxes
    otherExperience?: string, // Si "other" dans experiences
    specialWishes?: string // Textarea libre
  }

  // Options religieuses
  RELIGIOUS_OPTIONS = [
    'Catholic', 'Christian (non-Catholic)', 'Muslim', 'Jewish',
    'Hindu', 'Buddhist', 'Other'
  ]

  √âtape 7 : Summary (/onboarding/summary/page.tsx)

  PAGE COMPLEXE - G√âN√âRATION MOODBOARD + MIGRATION

  // Hook principal : useOnboardingMoodboard()
  // 1. Charge toutes les donn√©es onboarding
  // 2. Auto-g√©n√®re le moodboard au chargement
  // 3. Affiche ThreePhotoDisplay avec animation cin√©matique
  // 4. Migre vers dashboard avec completeOnboardingWithMigration()

  // S√©quence d'affichage
  1. Loading avec logo anim√©
  2. Auto-g√©n√©ration moodboard (forc√©e 3-photo grid-3x1)
  3. ThreePhotoDisplay cin√©matique
  4. Button "Continue to Dashboard" ‚Üí migration compl√®te

  üîß SYST√àME DE HOOKS & SERVICES

  1. useOnboardingNavigation.ts

  4 hooks export√©s :

  // Hook principal avec toutes options
  useOnboardingNavigation({step, prevPath, nextPath, validateData,
  getStepData, loadingDelay})

  // Hook simple sans validation
  useSimpleOnboardingNavigation(step, prevPath, nextPath)

  // Hook avec validation seulement  
  useValidatedOnboardingNavigation(step, prevPath, nextPath, validateData)

  // Hook complet (le plus utilis√©)
  useCompleteOnboardingNavigation(step, prevPath, nextPath, validateData,
  getStepData)

  // Hook pour charger data existante
  useOnboardingStepData(step)

  Fonctionnement :
  - Validation optionnelle avant navigation
  - Sauvegarde via onboardingService.saveStep(step, data)
  - Loading states (isSaving, isNavigating)
  - Gestion d'erreurs avec affichage

  2. useOnboardingMoodboard.ts

  Hook complexe qui combine onboarding + moodboard :

  // Charge TOUTES les donn√©es onboarding
  const { data: allSteps } = await onboardingService.getAllSteps()

  // Transforme step_2 ‚Üí coupleDetails + weddingStage  
  // Transforme step_3 ‚Üí guestInfo
  // Transforme step_4 ‚Üí weddingStyle  
  // Transforme step_5 ‚Üí experiencesExtras

  // Utilise useMoodboard() pour g√©n√©ration
  generateMoodboard({
    generationType: '3-photo',
    layoutType: 'grid-3x1',
    useLocationContext: true
  })

  // Finalise avec migration compl√®te
  completeOnboardingWithMigration() ‚Üí
  onboardingService.completeOnboarding()

  3. lib/onboarding.ts - OnboardingDataService

  Service principal avec 5 m√©thodes :

  // Sauvegarde √©tape dans workspace.onboarding_data_couple
  saveStep(step: number, data: Record<string, any>)

  // R√©cup√®re une √©tape sp√©cifique  
  getStep(step: number)

  // R√©cup√®re toutes les √©tapes
  getAllSteps()

  // Compl√®te onboarding + migrate vers items table
  completeOnboarding()

  // V√©rifie si onboarding termin√©
  isOnboardingComplete()

  Migration Logic :
  Le completeOnboarding() transforme les donn√©es JSONB en items typ√©s :
  - step_2 ‚Üí wedding_stage, budget_setting, wedding_date, couple_info
  - step_3 ‚Üí guest_summary
  - step_4 ‚Üí wedding_style
  - step_5 ‚Üí ceremony_details

  üé® SYST√àME MOODBOARD (TR√àS SOPHISTIQU√â)

  Architecture 3-Photo System

  // 1. lib/moodboard-randomizer.ts ‚Üí buildScene()
  // G√©n√®re 3 PhotoConfiguration al√©atoires

  // 2. lib/moodboard-categories.ts  
  // 10 cat√©gories avec subcategories, probabilities, elements

  // 3. lib/moodboard-prompts.ts
  // Templates dynamiques utilisant onboarding data

  // 4. lib/image-generation-service.ts
  // G√©n√®re 3 images via DALL-E avec prompts sophistiqu√©s

  // 5. lib/image-composition-service.ts  
  // Compose moodboard final grid-3x1

  Cat√©gories & Prompts

  10 cat√©gories disponibles :
  1. ceremony - Arches, all√©es, chaises c√©r√©monie
  2. reception_ballroom - Salles, plafonds, entr√©es
  3. reception_table - Tables, centres de table, couverts
  4. wedding_cake - G√¢teaux multi-√©tages avec d√©cor
  5. photo_booth - Backdrops, props, √©clairage
  6. decorative_details - Papeterie, objets, bagues
  7. couple_entrance - All√©es c√©r√©monie, d√©coration chemin
  8. venue_aerial - Vues a√©riennes, terrasses, jardins
  9. lighting_atmosphere - √âclairage, ambiances, mood
  10. traditions_rituals - Rituels culturels/religieux

  Templates dynamiques :
  Les prompts utilisent OnboardingTemplateData :
  - Noms du couple ‚Üí personnalisation
  - Type religieux ‚Üí mandap/autel/croix appropri√©
  - Couleurs palette ‚Üí int√©gration naturelle
  - Lieu ‚Üí contexte g√©ographique
  - Budget/style ‚Üí niveau de luxe

  Prompts Exemple :

  ceremony: (data) => `
  ${data.ceremonyType} wedding ceremony just before guests arrive,
  asymmetrical floral arch with ${data.colors.join(' and ')} arrangements,
  wooden cross-back chairs in neat rows,
  photographed at ${data.location} during golden hour,
  documentary wedding photography style, depth of field
  `

  üö® PROBL√àMES D√âTECT√âS

  1. Inconsistance Data Mapping

  // PROBL√àME : step_2 contient DEUX types de donn√©es
  // Dans couple-details : noms + date + budget 
  // Dans stage : stage + location
  // ‚Üí M√™me step_2 utilis√© pour 2 pages diff√©rentes !

  // IMPACT : Confusion, donn√©es m√©lang√©es

  2. Flux Wedding Planner Obsol√®te

  // /onboarding/planners/page.tsx utilise localStorage
  // Pas d'int√©gration avec Supabase
  // Code isol√© du syst√®me principal
  // ‚Üí √Ä supprimer ou refactorer compl√®tement

  3. Backup File Obsol√®te

  // /onboarding/summary/page_backup.tsx pr√©sent
  // ‚Üí √Ä supprimer pour √©viter confusion

  4. Constants Dependency

  // lib/constants.ts utilis√© mais non analys√©
  // CURRENCY_CONFIG, INTERNATIONAL_GUEST_OPTIONS import√©s
  // ‚Üí V√©rifier existence et coh√©rence

  5. Moodboard Complexity

  Le syst√®me moodboard est extr√™mement sophistiqu√© mais peut-√™tre
  over-engineered :
  - 10+ fichiers interconnect√©s
  - Randomisation complexe avec seeds
  - Anti-repetition tokens
  - Location context integration
  - Image analysis et swapping
  - Multiple fallback systems

  Avantages : Tr√®s personnalis√©, haute qualit√©
  Inconv√©nients : Complexit√© maintenance, debugging difficile

  ‚úÖ POINTS FORTS

  1. Architecture robuste avec hooks r√©utilisables
  2. Validation compl√®te √† chaque √©tape
  3. Persistance fiable via Supabase + JSONB
  4. UX excellent avec loading states et animations
  5. Syst√®me moodboard r√©volutionnaire avec IA personnalis√©e
  6. Migration data propre vers architecture finale
  7. Gestion erreurs compl√®te avec retry logic
  8. Responsive design sur tous composants

  üìä M√âTRIQUES & PERFORMANCE

  - 7 √©tapes onboarding total (6 + summary)
  - ~3-4 minutes temps utilisateur estim√©
  - 5 appels API Supabase minimum par user
  - 3 images DALL-E g√©n√©r√©es au summary
  - 1 migration compl√®te vers items table
  - ~20 composants UI impliqu√©s
  - ~15 hooks/services utilis√©s

  üéØ RECOMMANDATIONS

  Critiques - √Ä corriger rapidement

  1. S√©parer step_2 : stage ‚Üí step_1, couple-details ‚Üí step_2
  2. Supprimer page_backup.tsx et planner obsol√®te
  3. Standardiser data mapping entre hooks
  4. Documenter lib/constants.ts

  Am√©liorations - Optionnelles

  1. Simplifier moodboard system si maintenance difficile
  2. Ajouter tests pour validation flows
  3. Optimiser bundle size des composants moodboard
  4. Ajouter analytics pour tracking abandons

  ---
  CONCLUSION : Votre syst√®me d'onboarding est techniquement excellent avec
   une architecture solide et des fonctionnalit√©s innovantes. Le moodboard
   IA est particuli√®rement impressionnant. Quelques corrections mineures
  de coh√©rence suffisent pour le rendre parfait !